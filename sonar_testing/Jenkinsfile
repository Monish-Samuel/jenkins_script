pipeline{
agent any
	
    stages{
        stage('Pre-Flight Checks'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Monish-Samuel/powershell_testing.git']]])
			script{
			def file= powershell returnStdout: true, script: './build_scripts/build_prep.ps1'
			def buildNumber= powershell (returnStdout: true, script: 'Get-Content ./buildNo.txt').trim()
			currentBuild.displayName = "${buildNumber}"
			env.buildNo= buildNumber
			def buildbranch= powershell (returnStdout: true, script: 'Get-Content ./buildbranch.txt').trim()
			currentBuild.description= "${buildbranch}"
			env.buildbranch= buildbranch	
		}
	    }	
	}
	    stage('Build-Automation'){
		    steps{
			    powershell './build_scripts/zip_creation.ps1'
		    }
	    }
	    stage('SonarQube analysis') {
    			steps {
    				script {
            				def SONARSCANNER = tool "sonar-scanner";
            				withSonarQubeEnv("jenkins_sonarqube") {
                 			bat "${SONARSCANNER}/bin/sonar-scanner.bat"
         			}
    			}
     		}
	}
   	stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
	    stage('Build-Management'){
		    steps{
			    rtUpload (   
   				 serverId: 'generic-libs-prod',
    					spec: '''{
          					"files": [
            						{
              						"pattern": "./source-repo/app-$buildNo.zip",
             						 "target": "generic-libs-prod/"
           				 		}
          					]
   					 }''',
				    buildName: 'Flask-App',
				    buildNumber: buildNo,
				)
			    			    
			rtPublishBuildInfo (
    				serverId: 'generic-libs-prod',
				buildName: 'Flask-App',
				buildNumber: buildNo,
			)
		    }
	    }
	    stage('Build-Image'){
		    steps{
			    bat 'docker build -t flask-app:${buildNo} .'
		    }
	    }
	    stage('Start-Image'){
		    steps{
			    bat 'docker ps -f name=stringCalculation -q | xargs --no-run-if-empty docker container stop'
			    bat 'docker container ls -a -fname=stringCalculation -q | xargs -r docker container rm'
			    script{
			    	bat 'docker run -d -p 8996:5000 --rm --name stringCalculation flask-app:${buildNo}'
			    }
		    }
	    }
    }
}
