pipeline{
agent any
	
environment{
        AWS_AP_SOUTH_1_KEY= credentials('jenkins-docker-aws')
    }
	
    stages{
        stage('Pre-Flight Checks'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Monish-Samuel/powershell_testing.git']]])
			script{
			def file= powershell returnStdout: true, script: './build_scripts/build_prep.ps1'
			def buildNumber= powershell (returnStdout: true, script: 'Get-Content ./buildNo.txt').trim()
			currentBuild.displayName = "${buildNumber}"
			env.buildNo= buildNumber
			def buildbranch= powershell (returnStdout: true, script: 'Get-Content ./buildbranch.txt').trim()
			currentBuild.description= "${buildbranch}"
			env.buildbranch= buildbranch	
		}
	    }	
	}
	    stage('Build-Automation'){
		    steps{
			    powershell './build_scripts/zip_creation.ps1'
		    }
	    }
// 	    stage('SonarQube analysis') {
//     			steps {
//     				script {
//             				def SONARSCANNER = tool "sonar-scanner";
//             				withSonarQubeEnv("jenkins_sonarqube") {
//                  			bat "${SONARSCANNER}/bin/sonar-scanner.bat"
//          			}
//     			}
//      		}
// 	}
//    	stage("Quality Gate") {
//             steps {
//                 timeout(time: 1, unit: 'MINUTES') {
//                     // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
//                     // true = set pipeline to UNSTABLE, false = don't
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }
// 	    stage('Build-Management'){
// 		    steps{
// 			    rtUpload (   
//    				 serverId: 'generic-libs-prod',
//     					spec: '''{
//           					"files": [
//             						{
//               						"pattern": "./source-repo/app-$buildNo.zip",
//              						 "target": "generic-libs-prod/"
//            				 		}
//           					]
//    					 }''',
// 				    buildName: 'Flask-App',
// 				    buildNumber: buildNo,
// 				)
			    			    
// 			rtPublishBuildInfo (
//     				serverId: 'generic-libs-prod',
// 				buildName: 'Flask-App',
// 				buildNumber: buildNo,
// 			)
// 		    }
// 	    }
	    stage('Build-Image'){
		    steps{
		    	bat 'docker build -t flask-app .'
		    }
	    }
	    stage('ECR Image Push'){
		    steps{
			powershell '(Get-ECRLoginCommand).Password | docker login --username AWS --password-stdin 975072647018.dkr.ecr.ap-south-1.amazonaws.com'
			bat 'docker tag flask-app:latest 975072647018.dkr.ecr.ap-south-1.amazonaws.com/flask-app:${buildNo}' 
			bat 'docker push 975072647018.dkr.ecr.ap-south-1.amazonaws.com/demo-repo:${buildNo}'    
		    }
	    }
    }
}
